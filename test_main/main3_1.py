import pandas as pd
import numpy as np
from random import randint
from object3_1 import object
import time
import matplotlib.pyplot as plt


# 读取区域需求量
demand_i = pd.read_csv('F:/bikedata/bike_datas/test/zone_day.csv')
# 读取区域包含的站点信息
zone_i = pd.read_csv('F:/bikedata/bike_datas/station_datas.csv').rename(
    columns={'station_id': 'id', 'zone_id': 'zone'})[['id', 'zone']]
# 读取站点信息
stations_i = pd.read_csv('F:/bikedata/bike_datas/station_datas.csv')[['station_id', 'capacity']].\
    rename(columns={'station_id': 'id'})
# demand_i['start'] = round(demand_i['start'] * 0.5)
# demand_i['end'] = round(demand_i['end'] * 0.5)


def main(demand, zone, stations, day):
    # 构建新站点
    new_zone = pd.DataFrame()
    new_stations = pd.DataFrame()
    # 新站点构建
    new_zone['zone'] = zone.drop(zone[zone[['zone']].duplicated()].index, axis=0)['zone']
    new_zone['id'] = new_zone['zone'].apply(lambda x: int(str(x)[::]))
    new_stations['id'] = new_zone['id']
    new_stations['capacity_up'] = 60
    new_stations['capacity'] = 60
    # 新站点分割线
    object_list, bikes_list, capacity_list, bikes_best_list, capacity_best_list = [], [], [], [], []
    best_gap, best_start_demands, best_end_demands, best_bikes, best_capacity = 10000000, 0, 0, 10000000, 10000000
    best_object = ()
    new_stations_best = new_stations.copy()
    stations_i = pd.concat([stations, new_stations])  # 加入新站点
    zone_i = pd.concat([new_zone, zone], sort=True)  # 加入新站点
    zone_count_stations = zone_i.groupby(['zone'])['id'].count().reset_index()  # 统计每个区域的站点数量
    demand_i = pd.merge(demand, zone_count_stations, how='left', on='zone').rename(columns={'id': 'count_stations'})
    stations_i['bikes'] = round(stations_i['capacity'] * 0.5)  # 设置车子数量
    stations_i = stations_i.set_index('id')


    for time_i in range(100):
        # 加入新站点
        # stations_i['bikes'] = round(stations_i['capacity'] * 0.6)  # 设置车子数量
        # stations_i['bikes'] = stations_i['capacity'].apply(lambda x: x * randint(4, 7)/10)  # 设置车子数量
        # stations_i['bikes'] = stations_i['capacity'].apply(lambda x: round(x * randint(2, 9)/10))  # 设置车子数量
        gap, start_demands, end_demands = object(time_i, demand_i, zone_i, stations_i, day)
        bikes = stations_i['bikes'].sum()
        object_i = (gap, start_demands, end_demands, bikes)
        object_list.append(object_i)
        # 加入算法
        random_num = randint(0, 100)
        t = False
        if best_start_demands < start_demands or best_end_demands < end_demands:
            best_gap, best_start_demands, best_end_demands, best_bikes = gap, start_demands, end_demands, bikes
            best_object = object_i
            new_stations_best = stations_i.copy()
            t = True

        # if best_bikes > bikes and best_capacity > capacity:
        #     best_bikes, best_capacity = bikes, capacity
        #     best_object = object_i
        #     new_stations_best = new_stations.copy()
        #     t = True
        if t is False and random_num <= 10:
            stations_i['bikes'] = stations_i['capacity'].apply(lambda x: round(x * randint(0, 100) / 100))
        else:
            stations_i['bikes'] = new_stations_best['bikes'].apply(lambda x: round(x * randint(90, 110) / 100))
        print(best_object)

        bikes_list.append(bikes)
        bikes_best_list.append(best_bikes)
    # new_stations_best.to_csv('./best_stations.csv', index=None)
    return object_list, bikes_list, bikes_best_list

start_time = time.time()
object_list, bikes_list, bikes_best_list = main(demand_i, zone_i, stations_i, 31)
end_time = time.time()
print(object_list)
print('用时：%s s' % round(end_time - start_time))
print('原站点求可以满足的最大需求量10d,100轮')
# print('原站点求可以满足的最大需求量')

def DrawLinechart(y1, y2, title):
    x = range(len(y1))  # 生成0-10
    plt.plot(x, y1, c="R", label='common')
    plt.plot(x, y2, c='B', label='best')
    plt.legend(loc='upper left')#图例的位置是左上
    plt.xlabel('round')#X轴标签
    plt.ylabel('value')#Y轴标签
    plt.title(title)#折线图标题

    plt.show()
# DrawLinechart(bikes_list, bikes_best_list, 'bikes')
DrawLinechart(bikes_list, bikes_best_list, 'bikes')

# 在容量固定的情况下，看可以满足的最大需求量

# 分配比例一致 10day
# 原站点 车子0.5   [(21122.0, 273903.0, 274335.0, 12742.0)]
# 新站点 上限60 车子0.5  [(23406.0, 288365.0, 288547.0, 24112.0)  用时：298 s][(23472.0, 289096.0, 289208.0, 24112.0)用时：280 s][(23471.0, 288895.0, 289012.0, 24112.0)用时：287 s]
# 原站点 车子0.5  31day [(43564.0, 684084.0, 684964.0)] # 错误代码
# 新站点 上限60 车子0.5  [(60378.0, 899478.0, 900160.0)] # 错误代码


# 分配比例不一样 10day
# 原站点 车子0.5 [(48227.0, 246158.0, 246433.0, 12742.0) 542 s]
# 新站点 上限60 车子0.5  ([(87738.0, 254562.0, 254520.0, 24112.0) 500 s]
# 分配比例不一样  31day
# 原站点 车子0.5 [(65900.0, 1068871.0, 1069669.0, 12742.0)10048 s]
# 新站点 上限60 车子0.5  [(72361.0, 1123740.0, 1124433.0, 24112.0)6728 s]



# 加入算法  容量固定60 车子0.5  10day  100轮 
# 新站点[(23612.0, 290146.0, 290262.0, 24189) ,16821 s]
# [(23508.0, 289041.0, 289175.0, 24112.0), (23465.0, 288894.0, 288999.0, 24112), (23408.0, 288283.0, 288383.0, 24150), (23467.0, 288954.0, 289071.0, 24070), (23516.0, 289400.0, 289554.0, 24126), (23541.0, 289112.0, 289289.0, 24144), (23453.0, 288653.0, 288866.0, 24107), (23497.0, 289048.0, 289215.0, 24095), (23431.0, 288257.0, 288460.0, 24073), (23481.0, 289085.0, 289216.0, 24160), (23495.0, 289173.0, 289268.0, 24047), (23479.0, 288985.0, 289118.0, 24081), (23467.0, 288767.0, 288900.0, 24085), (23515.0, 289047.0, 289144.0, 24097), (23549.0, 289230.0, 289333.0, 24201), (23507.0, 288977.0, 289122.0, 24009), (23452.0, 288638.0, 288790.0, 24090), (23450.0, 288486.0, 288612.0, 24124), (23473.0, 288800.0, 288933.0, 24176), (22939.0, 285006.0, 285017.0, 23470), (22867.0, 284380.0, 284623.0, 24183), (23486.0, 289182.0, 289310.0, 24104), (23512.0, 289359.0, 289553.0, 24046), (23455.0, 288663.0, 288780.0, 24165), (23496.0, 289150.0, 289276.0, 24215), (23512.0, 289252.0, 289386.0, 24105), (23521.0, 289462.0, 289553.0, 24134), (23513.0, 288837.0, 288958.0, 24121), (23485.0, 289304.0, 289397.0, 24076), (23544.0, 289675.0, 289815.0, 24165), (23528.0, 289059.0, 289201.0, 24127), (23553.0, 289573.0, 289676.0, 24270), (23544.0, 289279.0, 289377.0, 24147), (23531.0, 289598.0, 289759.0, 24205), (23628.0, 290105.0, 290247.0, 24119), (23567.0, 289444.0, 289541.0, 24105), (23583.0, 289932.0, 290061.0, 24013), (23571.0, 289549.0, 289654.0, 24095), (23657.0, 290046.0, 290175.0, 24078), (23612.0, 290146.0, 290262.0, 24189), (23519.0, 289289.0, 289376.0, 24160), (23505.0, 289328.0, 289453.0, 24149), (23552.0, 289626.0, 289684.0, 24303), (23094.0, 285303.0, 285543.0, 23635), (23529.0, 289370.0, 289539.0, 24250), (23532.0, 289252.0, 289402.0, 24142), (23527.0, 289243.0, 289312.0, 24221), (23462.0, 288635.0, 288751.0, 24143), (23564.0, 289448.0, 289616.0, 24255), (23535.0, 289619.0, 289768.0, 24254), (23497.0, 289317.0, 289404.0, 24194), (23543.0, 289576.0, 289651.0, 24286), (23531.0, 289476.0, 289599.0, 24147), (23581.0, 289767.0, 289858.0, 24257), (23482.0, 289111.0, 289233.0, 24165), (23506.0, 289187.0, 289251.0, 24227), (23522.0, 289394.0, 289494.0, 24234), (23526.0, 289456.0, 289616.0, 24188), (23583.0, 289530.0, 289649.0, 24133), (23523.0, 289223.0, 289310.0, 24170), (23520.0, 289680.0, 289816.0, 24086), (23584.0, 289856.0, 289950.0, 24238), (23539.0, 289622.0, 289687.0, 24287), (23597.0, 290083.0, 290224.0, 24157), (22793.0, 284087.0, 284158.0, 23962), (23585.0, 289593.0, 289752.0, 24206), (23547.0, 289506.0, 289587.0, 24136), (23599.0, 289374.0, 289497.0, 24249), (22777.0, 285302.0, 285591.0, 23817), (23466.0, 288735.0, 288875.0, 24205), (23533.0, 289396.0, 289499.0, 24182), (23017.0, 285075.0, 284940.0, 24045), (23588.0, 289739.0, 289857.0, 24139), (23499.0, 289260.0, 289387.0, 24218), (23532.0, 289089.0, 289181.0, 24173), (23529.0, 289344.0, 289421.0, 24176), (23538.0, 288939.0, 289087.0, 24223), (23549.0, 289559.0, 289658.0, 24159), (23527.0, 289040.0, 289173.0, 24167), (23555.0, 289776.0, 289869.0, 24100), (23577.0, 289380.0, 289503.0, 24189), (23583.0, 289652.0, 289737.0, 24200), (23536.0, 289530.0, 289674.0, 24149), (23506.0, 289195.0, 289311.0, 24174), (23635.0, 290053.0, 290160.0, 24238), (23637.0, 289812.0, 289899.0, 24287), (23503.0, 288638.0, 288771.0, 24167), (23537.0, 289630.0, 289807.0, 24193), (23553.0, 288973.0, 289084.0, 24146), (23534.0, 289647.0, 289803.0, 24138), (23561.0, 289797.0, 289936.0, 24153), (23579.0, 289682.0, 289865.0, 24142), (23458.0, 288685.0, 288831.0, 24194), (23480.0, 289055.0, 289195.0, 24214), (23592.0, 289766.0, 289894.0, 24191), (23565.0, 289732.0, 289823.0, 24170), (23564.0, 289794.0, 289918.0, 24175), (23572.0, 289369.0, 289489.0, 24249), (23596.0, 289633.0, 289773.0, 24181), (23516.0, 289246.0, 289378.0, 24168)]
# 原站点  (21219.0, 274810.0, 275241.0, 12696) 28800s
#[(21095.0, 273693.0, 274112.0, 12742.0), (21080.0, 273616.0, 274018.0, 12739), (21084.0, 273287.0, 273707.0, 12756), (21098.0, 273643.0, 274087.0, 12691), (21130.0, 273661.0, 274073.0, 12761), (21091.0, 273494.0, 273885.0, 12702), (21045.0, 273233.0, 273690.0, 12712), (21100.0, 273418.0, 273806.0, 12749), (21081.0, 273764.0, 274159.0, 12781), (21070.0, 273473.0, 273869.0, 12792), (21123.0, 273922.0, 274305.0, 12784), (21158.0, 274062.0, 274474.0, 12763), (21155.0, 273695.0, 274102.0, 12723), (21145.0, 273666.0, 274097.0, 12735), (21124.0, 273899.0, 274287.0, 12727), (21108.0, 273601.0, 274029.0, 12765), (21124.0, 274062.0, 274456.0, 12769), (21122.0, 273968.0, 274400.0, 12780), (21169.0, 274081.0, 274528.0, 12731), (21153.0, 274277.0, 274706.0, 12742), (21174.0, 274303.0, 274749.0, 12768), (21177.0, 274088.0, 274521.0, 12781), (21170.0, 274332.0, 274764.0, 12733), (21146.0, 273968.0, 274420.0, 12719), (21173.0, 274036.0, 274449.0, 12762), (21147.0, 273756.0, 274179.0, 12697), (21179.0, 274071.0, 274460.0, 12753), (21181.0, 274724.0, 275173.0, 12653), (21193.0, 274229.0, 274706.0, 12607), (20642.0, 270882.0, 271392.0, 12516), (21175.0, 274214.0, 274651.0, 12691), (21147.0, 274300.0, 274781.0, 12698), (21225.0, 274300.0, 274771.0, 12625), (21177.0, 274127.0, 274558.0, 12658), (21180.0, 274086.0, 274580.0, 12599), (21183.0, 274066.0, 274521.0, 12661), (21165.0, 274056.0, 274513.0, 12666), (21176.0, 274403.0, 274845.0, 12615), (21168.0, 274015.0, 274459.0, 12667), (21125.0, 273937.0, 274364.0, 12676), (21128.0, 274027.0, 274519.0, 12593), (21181.0, 274141.0, 274596.0, 12633), (21194.0, 274204.0, 274642.0, 12712), (21188.0, 274188.0, 274664.0, 12638), (21194.0, 274289.0, 274787.0, 12614), (21117.0, 273562.0, 273985.0, 12653), (21196.0, 274283.0, 274727.0, 12667), (21166.0, 274101.0, 274541.0, 12688), (21131.0, 274020.0, 274515.0, 12681), (21146.0, 273890.0, 274304.0, 12671), (21163.0, 274256.0, 274713.0, 12674), (21175.0, 274215.0, 274698.0, 12642), (21181.0, 274136.0, 274581.0, 12667), (21164.0, 274071.0, 274505.0, 12657), (21138.0, 273634.0, 274114.0, 12621), (21187.0, 274507.0, 274972.0, 12643), (21197.0, 273806.0, 274257.0, 12660), (21132.0, 273924.0, 274380.0, 12648), (21176.0, 273735.0, 274181.0, 12669), (21174.0, 273976.0, 274384.0, 12676), (21202.0, 274180.0, 274648.0, 12661), (21180.0, 274316.0, 274784.0, 12615), (20631.0, 269477.0, 269628.0, 12930), (21219.0, 274810.0, 275241.0, 12696), (21134.0, 274158.0, 274630.0, 12677), (21153.0, 273753.0, 274170.0, 12708), (21190.0, 274418.0, 274840.0, 12712), (21193.0, 274148.0, 274551.0, 12707), (21161.0, 274203.0, 274666.0, 12702), (20530.0, 268336.0, 268740.0, 12533), (21166.0, 274515.0, 274921.0, 12786), (21140.0, 273658.0, 274068.0, 12686), (21219.0, 274508.0, 274955.0, 12627), (21207.0, 274421.0, 274856.0, 12690), (21198.0, 274310.0, 274722.0, 12710), (21202.0, 274229.0, 274647.0, 12702), (21186.0, 274151.0, 274559.0, 12718), (21222.0, 274274.0, 274678.0, 12678), (21189.0, 274006.0, 274437.0, 12699), (21192.0, 274230.0, 274650.0, 12666), (21192.0, 274252.0, 274684.0, 12706), (21155.0, 274363.0, 274776.0, 12703), (21178.0, 274533.0, 274967.0, 12666), (21143.0, 273834.0, 274263.0, 12720), (21179.0, 274093.0, 274532.0, 12683), (20382.0, 269023.0, 269589.0, 12320), (21176.0, 274026.0, 274448.0, 12691), (21165.0, 274306.0, 274751.0, 12709), (21189.0, 274454.0, 274887.0, 12679), (20531.0, 268859.0, 269202.0, 12793), (20240.0, 265737.0, 265969.0, 12867), (21196.0, 274200.0, 274630.0, 12710), (21186.0, 274648.0, 275052.0, 12718), (21192.0, 274590.0, 275008.0, 12675), (21131.0, 274154.0, 274579.0, 12696), (21186.0, 274225.0, 274641.0, 12712), (20495.0, 269586.0, 269723.0, 13020), (21183.0, 274025.0, 274450.0, 12708), (20557.0, 269895.0, 270300.0, 12628), (21171.0, 274018.0, 274457.0, 12730)]





# 新站点 上限60 车子0.5



# 新站点 上限60 车子0.5 [(12438.0, 135112.0, 135162.0)] [(12400.0, 134913.0, 134963.0)] [(12419.0, 135075.0, 135102.0)] [(12500.0, 135557.0, 135501.0)]
# 原站点 车子0.5  5day [(11539.0, 128367.0, 128404.0)]




# 修改为最大满足需求量的目标函数

# 开始结束需求量分配比例一致
# 所有站点初始比例 0.5 / day5  12754.0 136985.0 136983.0/12776.0 136985.0 136983.0/12756.0 136985.0 136983.0/12746.0 136985.0 136983.0/12766.0 136985.0 136983.0
# 所有站点初始比例 0.6 / day5  12770.0 136985.0 136983.0/12764.0 136985.0 136983.0/12780.0 136985.0 136983.0/12764.0 136985.0 136983.0
# 所有站点初始比例 0.4-0.6 / day5  12750.0 136985.0 136983.0/12756.0 136985.0 136983.0/12760.0 136985.0 136983.0/12764.0 136985.0 136983.0
# 所有站点初始比例 0.2-0.8 / day5  12770.0 136985.0 136983.0/12770.0 136985.0 136983.0/12633.0 136723.0 136588.0/12762.0 136985.0 136983.0

# 原站点 初始比例 0.5 / day5  11820.0 130692.0 130586.0/11806.0 130692.0 130586.0/11808.0 130692.0 130586.0/11816.0 130692.0 130586.0/11788.0 130692.0 130586.0/11810.0 130692.0 130586.0
# 原站点 初始比例 0.6 / day5  11822.0 130692.0 130586.0/11806.0 130692.0 130586.0/11808.0 130692.0 130586.0/11804.0 130692.0 130586.0
# 所有站点初始比例 0.4-0.6 / day5  11808.0 130692.0 130586.0/11812.0 130692.0 130586.0/11814.0 130692.0 130586.0






#  开始结束需求量分配比例不同
# 所有站点初始比例 0.5 / day5  40670.0 114765.0 114851.0/42953.0 113712.0 113813.0/41784.0 115108.0 115020.0/40687.0 111665.0 111634.0/39514.0 110371.0 110331.0


# 原站点/初始车子比例 0.5/不断改变需求量无法分配的站点初始比例/day1  2554.0 30228.0 30228.0 / 2564.0 30228.0 30228.0 / 2556.0 30228.0 30228.0
# 原站点/初始车子比例 0.5/不断改变需求量无法分配的站点初始比例/day1-2  4569.0 48228.0 48227.0 / 4577.0 48228.0 48227.0/4575.0 48228.0 48227.0

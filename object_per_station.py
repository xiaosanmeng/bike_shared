import pandas as pd
import numpy as np
from random import randint



#  老站点寻求可行解的目标函数

# # 读取区域需求量
# demand = pd.read_csv('F:/bikedata/bike_datas/test/zone_day.csv')
# # 读取区域包含的站点信息
# zone = pd.read_csv('F:/bikedata/bike_datas/station_datas.csv').rename(
#     columns={'station_id': 'id', 'zone_id': 'zone'})[['id', 'zone']]
# # 读取站点信息
# stations = pd.read_csv('F:/bikedata/bike_datas/station_datas.csv')[['station_id', 'capacity']].\
#     rename(columns={'station_id': 'id'})
# new_station = pd.DataFrame()
# ############################  加入新站点
# # new_station['zone'] = zone.drop(zone[zone[['zone']].duplicated()].index,axis=0)['zone']
# # new_station['id'] = new_station['zone'].apply(lambda x: int(str(x)[::]))
# # capacity_i = new_station[['id']]
# # capacity_i['capacity'] = 60
# # stations = pd.concat([stations, capacity_i])  # 加入新站点
# ##############################
# zone = pd.concat([new_station, zone])  # 加入新站点
# zone_count_stations = zone.groupby(['zone'])['id'].count().reset_index()  # 统计每个区域的站点数量
# demand = pd.merge(demand, zone_count_stations, how='left', on='zone').rename(columns={'id': 'count_stations'})
# # stations['bikes'] = round(stations['capacity'] * 0.5)  # 设置车子数量
# stations['bikes'] = round(stations['capacity'] * 0.6)  # 设置车子数量
# # stations['bikes'] = stations['capacity'].apply(lambda x: x * random.randint(4, 7)/10)  # 设置车子数量
# stations = stations.set_index('id')
#
# # 读取站点空白表
# stations_demands = pd.read_csv('F:/bikedata/bike_datas/test/empty.csv')







def object(demand, zone, stations, time):
    def random_start(length, demands_i):
        points = [randint(0, 100) for i in range(length - 1)]  # 生成几个随机点
        points = [0] + sorted(points) + [100]  # 排个队
        points = [(points[i + 1] - points[i]) / 100 for i in range(length - 1)]
        start_demand = demands_i['start'][0]
        end_demand = demands_i['end'][0]
        start = [round(points[i] * start_demand) for i in range(length - 1)]
        end = [round(points[i] * end_demand) for i in range(length - 1)]
        start.append(start_demand - sum(start))
        end.append(end_demand - sum(end))
        return start, end

    def station_init_bikes(data, list, capacity_i):
        data.loc[list, 'bikes'] = round(capacity_i * randint(0, 100) / 100)
        return data

    # stations['bikes'] = round(stations['capacity'] * 0.5)  # 设置车子数量
    zone_list = demand.drop(demand[demand[['zone']].duplicated()].index, axis=0)['zone']  # 区域列
    gap_sum, start_demand_sum, end_demands_sum = 0, 0, 0  # 统计缺口总量, 满足的借车需求量, 满足的还车需求量
    stop_list = []
    tt1 = []
    for index, z in enumerate(zone_list):
        zone_data = demand[demand['zone'] == z]  # 依此读取每个区域的数据
        stations_list = list(zone[zone['zone'] == z]['id'])  # 获取该区域站点的id
        length_stations = len(stations_list)  # 获取该区域站点的数量
        for reset_bikes in range(500):  # 寻找可行初始解的次数
            stop = 0
            for day in range(time):
                if (day+1) not in list(zone_data['day']):
                    continue
                day_demand = zone_data[zone_data['day'] == (day+1)].reset_index(drop=True)
                capacity = stations.loc[stations_list]['capacity']  # 获取区域内站点的容量
                bikes = stations.loc[stations_list]['bikes']  # 获取区域内站点的车子数量
                for time_1 in range(100):
                    # day_demand = pd.Series(day_demand)
                    print('round', reset_bikes, 'day:', day + 1, 'zone:', z, "%:", index, len(zone_list), time_1)
                    start_demands, end_demands = random_start(length_stations, day_demand)  # 分配区域借车量
                    judge = start_demands <= bikes + end_demands
                    judge_i = end_demands <= capacity - bikes + start_demands
                    if judge[judge == True].sum() == length_stations and judge_i[
                        judge_i == True].sum() == length_stations:
                        break
                    elif time_1 == 99:
                        stop = 1
                if stop == 1:
                    stations = station_init_bikes(stations, stations_list, capacity)
                    break
                else:
                    gap = [end_demands[i] - start_demands[i] for i in range(length_stations)]
                    stations.loc[stations_list, 'bikes'] = bikes + gap
                    start_demand = sum(start_demands)
                    end_demands = sum(end_demands)
                    gap = [abs(i) for i in gap]
                    start_demand_sum += start_demand
                    end_demands_sum += end_demands
                    gap_sum += sum(gap)
                    stop = 2
            if reset_bikes == 499:
                stop_list.append([stations_list, day])
            if stop == 2:
                tt1.append([z, start_demand_sum, end_demands_sum])
                break
    print(stop_list)
    print(gap_sum, start_demand_sum, end_demands_sum)
    print(tt1)



# 主函数




def main(demand, zone, stations, new_station, day):
    # 构建新站点
    new_station['zone'] = zone.drop(zone[zone[['zone']].duplicated()].index, axis=0)['zone']
    new_station['id'] = new_station['zone'].apply(lambda x: int(str(x)[::]))
    capacity_i = new_station[['id']]
    capacity_i['capacity'] = 60
    stations = pd.concat([stations, capacity_i])  # 加入新站点
    # stations['bikes'] = stations['capacity'].apply(lambda x: round(x * randint(2, 9)/10))  # 设置车子数量
    # 加入新站点
    zone = pd.concat([new_station, zone], sort=True)  # 加入新站点
    zone_count_stations = zone.groupby(['zone'])['id'].count().reset_index()  # 统计每个区域的站点数量
    demand = pd.merge(demand, zone_count_stations, how='left', on='zone').rename(columns={'id': 'count_stations'})
    stations['bikes'] = round(stations['capacity'] * 0.5)  # 设置车子数量
    # stations['bikes'] = round(stations['capacity'] * 0.6)  # 设置车子数量
    # stations['bikes'] = stations['capacity'].apply(lambda x: x * random.randint(4, 7)/10)  # 设置车子数量
    stations = stations.set_index('id')
    object(demand, zone, stations, day)

# 读取区域需求量
demand_i = pd.read_csv('F:/bikedata/bike_datas/test/zone_day.csv')
# 读取区域包含的站点信息
zone_i = pd.read_csv('F:/bikedata/bike_datas/station_datas.csv').rename(
    columns={'station_id': 'id', 'zone_id': 'zone'})[['id', 'zone']]
# 读取站点信息
stations_i = pd.read_csv('F:/bikedata/bike_datas/station_datas.csv')[['station_id', 'capacity']].\
    rename(columns={'station_id': 'id'})
new_station_i = pd.DataFrame()
main(demand_i, zone_i, stations_i, new_station_i, 5)


# 看一下需求量是否匹配，目前对不上，用一个区域一个区域对照
# [[1000202, 620.0, 626.0], [1000600, 1364.0, 1380.0], [1000700, 2700.0, 2687.0], [1000800, 3077.0, 3077.0], [1000900, 3530.0, 3543.0], [1001002, 3646.0, 3662.0], [1001200, 4035.0, 4055.0], [1001300, 4615.0, 4647.0], [1001401, 5072.0, 5101.0], [1001501, 5389.0, 5410.0], [1001502, 6000.0, 5961.0], [1001600, 6915.0, 6893.0], [1001800, 8143.0, 8158.0], [1002000, 8621.0, 8635.0], [1002100, 9552.0, 9540.0], [1002201, 9819.0, 9820.0], [1002202, 10096.0, 10107.0], [1002400, 10378.0, 10351.0], [1002500, 10690.0, 10676.0], [1002601, 10926.0, 10916.0], [1002700, 11116.0, 11108.0], [1002800, 11483.0, 11466.0], [1002900, 11752.0, 11755.0], [1003001, 12246.0, 12244.0], [1003002, 12989.0, 13021.0], [1003100, 13744.0, 13763.0], [1003200, 15220.0, 15260.0], [1003300, 16199.0, 16210.0], [1003400, 19550.0, 19244.0], [1003601, 20302.0, 19997.0], [1003602, 20637.0, 20326.0], [1003700, 21798.0, 21523.0], [1003800, 23057.0, 22861.0], [1003900, 23911.0, 23740.0], [1004000, 24953.0, 24789.0], [1004100, 25607.0, 25446.0], [1004200, 28427.0, 28745.0], [1004300, 29249.0, 29532.0], [1004400, 30536.0, 30807.0], [1004500, 31416.0, 31679.0], [1004700, 32019.0, 32296.0], [1004800, 32379.0, 32623.0], [1004900, 32935.0, 33207.0], [1005000, 34204.0, 34465.0], [1005200, 35543.0, 35780.0], [1005400, 36057.0, 36318.0], [1005501, 36514.0, 36790.0], [1005502, 37127.0, 37414.0], [1005600, 38513.0, 38826.0], [1005700, 39517.0, 39891.0], [1005800, 40674.0, 41028.0], [1005900, 41028.0, 41383.0], [1006000, 41949.0, 42333.0], [1006100, 43906.0, 44290.0], [1006200, 44247.0, 44636.0], [1006300, 45239.0, 45624.0], [1006400, 45720.0, 46063.0], [1006500, 46651.0, 47005.0], [1006600, 47472.0, 47802.0], [1006700, 47975.0, 48354.0], [1006800, 48471.0, 48846.0], [1006900, 49423.0, 49809.0], [1007000, 50777.0, 51145.0], [1007100, 51533.0, 51928.0], [1007200, 53358.0, 53679.0], [1007300, 53952.0, 54275.0], [1007400, 54719.0, 55023.0], [1007600, 55721.0, 56000.0], [1007700, 56345.0, 56620.0], [1007800, 56762.0, 57016.0], [1007900, 57556.0, 57806.0], [1008000, 61184.0, 61143.0], [1008100, 62676.0, 62625.0], [1008200, 63059.0, 63013.0], [1008300, 63801.0, 63750.0], [1008400, 64074.0, 64024.0], [1008601, 64353.0, 64328.0], [1008700, 65649.0, 65644.0], [1008800, 66045.0, 66041.0], [1008900, 67492.0, 67488.0], [1009000, 68179.0, 68143.0], [1009100, 68722.0, 68688.0], [1009200, 69511.0, 69453.0], [1009300, 69948.0, 69892.0], [1009400, 70648.0, 70594.0], [1009500, 71109.0, 71052.0], [1009600, 71970.0, 71918.0], [1009700, 73141.0, 73078.0], [1009800, 73760.0, 73701.0], [1009900, 75830.0, 75771.0], [1010000, 76502.0, 76401.0], [1010100, 78409.0, 78318.0], [1010200, 78669.0, 78581.0], [1010300, 80953.0, 81009.0], [1010400, 81237.0, 81294.0], [1010601, 81430.0, 81490.0], [1010602, 81510.0, 81570.0], [1010800, 81750.0, 81814.0], [1010900, 82275.0, 82334.0], [1011000, 82713.0, 82782.0], [1011100, 82883.0, 82954.0], [1011201, 83285.0, 83337.0], [1011202, 83468.0, 83485.0], [1011203, 83772.0, 83790.0], [1011300, 86007.0, 86095.0], [1011401, 86193.0, 86282.0], [1011402, 86357.0, 86446.0], [1011500, 86755.0, 86854.0], [1011700, 88493.0, 88815.0], [1011800, 89168.0, 89474.0], [1012000, 89253.0, 89550.0], [1012100, 90829.0, 91138.0], [1012200, 90955.0, 91264.0], [1012400, 91454.0, 91771.0], [1012500, 91909.0, 92204.0], [1012600, 92212.0, 92498.0], [1012700, 92922.0, 93192.0], [1012800, 93023.0, 93296.0], [1012900, 93276.0, 93537.0], [1013000, 93496.0, 93764.0], [1013100, 94504.0, 94755.0], [1013300, 95335.0, 95588.0], [1013400, 95936.0, 96201.0], [1013500, 96539.0, 96789.0], [1013600, 96814.0, 97086.0], [1013700, 97894.0, 98122.0], [1013800, 98249.0, 98496.0], [1013900, 98557.0, 98799.0], [1014000, 99177.0, 99452.0], [1014200, 99289.0, 99573.0], [1014300, 102020.0, 102249.0], [1014401, 102143.0, 102379.0], [1014402, 102264.0, 102532.0], [1014500, 103457.0, 103646.0], [1014602, 103615.0, 103803.0], [1014700, 104155.0, 104350.0], [1014802, 104231.0, 104435.0], [1014900, 104587.0, 104777.0], [1015002, 104683.0, 104875.0], [1015100, 105089.0, 105271.0], [1015300, 105393.0, 105581.0], [1015400, 105927.0, 106132.0], [1015500, 106063.0, 106275.0], [1015601, 106315.0, 106560.0], [1015602, 106361.0, 106618.0], [1015700, 106982.0, 107165.0], [1015900, 107693.0, 107830.0], [1016002, 107826.0, 107959.0], [1016100, 108028.0, 108140.0], [1016200, 108220.0, 108337.0], [1016300, 108387.0, 108523.0], [1016400, 108562.0, 108693.0], [1016500, 108711.0, 108817.0], [1016600, 108803.0, 108911.0], [1016700, 109202.0, 109303.0], [1016800, 109573.0, 109669.0], [1016900, 110070.0, 110138.0], [1017000, 110133.0, 110199.0], [1017100, 110388.0, 110434.0], [1017200, 110515.0, 110562.0], [1017300, 110697.0, 110703.0], [1017401, 110808.0, 110810.0], [1017500, 111067.0, 111059.0], [1017700, 111180.0, 111178.0], [1017800, 111360.0, 111358.0], [1017900, 111555.0, 111557.0], [1018000, 111694.0, 111697.0], [1018100, 111973.0, 111972.0], [1018200, 112040.0, 112047.0], [1018300, 112323.0, 112360.0], [1018400, 112409.0, 112450.0], [1018600, 112472.0, 112521.0], [1018700, 112646.0, 112709.0], [1018800, 112786.0, 112853.0], [1018900, 113164.0, 113229.0], [1019000, 113264.0, 113344.0], [1019100, 113320.0, 113390.0], [1019200, 113359.0, 113432.0], [1019300, 113428.0, 113503.0], [1019400, 113460.0, 113539.0], [1019500, 113827.0, 113871.0], [1019600, 113894.0, 113936.0], [1019701, 114097.0, 114123.0], [1019800, 114443.0, 114464.0], [1019900, 114545.0, 114551.0], [1020101, 114668.0, 114651.0], [1020102, 114755.0, 114737.0], [1020500, 114927.0, 114868.0], [1020600, 114961.0, 114904.0], [1020701, 115031.0, 114974.0], [1020800, 115107.0, 115062.0], [1021100, 115291.0, 115248.0], [1021303, 115316.0, 115275.0], [1021500, 115383.0, 115343.0], [1021600, 115669.0, 115633.0], [1021800, 115887.0, 115861.0], [1022200, 116066.0, 116053.0], [1022400, 116103.0, 116089.0], [1024200, 116133.0, 116117.0], [1025700, 116245.0, 116245.0], [1031703, 117071.0, 117069.0], [1031704, 117951.0, 117964.0], [3000100, 118089.0, 118056.0], [3000301, 118278.0, 118224.0], [3000501, 118687.0, 118511.0], [3000502, 118751.0, 118561.0], [3000700, 119075.0, 118912.0], [3000900, 119579.0, 119398.0], [3001100, 120018.0, 119810.0], [3001300, 120366.0, 120153.0], [3001500, 120668.0, 120431.0], [3001800, 120709.0, 120488.0], [3002100, 122486.0, 122510.0], [3002300, 122543.0, 122576.0], [3002901, 122566.0, 122613.0], [3003100, 123778.0, 123655.0], [3003300, 125505.0, 126556.0], [3003500, 126151.0, 127245.0], [3003700, 126635.0, 127796.0], [3003900, 126729.0, 127893.0], [3004100, 126785.0, 127965.0], [3004300, 126911.0, 128102.0], [3004500, 127134.0, 128339.0], [3004700, 127337.0, 128560.0], [3005100, 127404.0, 128628.0], [3005300, 127594.0, 128846.0], [3005900, 127681.0, 128939.0], [3006300, 127834.0, 129093.0], [3006500, 127972.0, 129243.0], [3006700, 128130.0, 129419.0], [3006900, 128541.0, 129859.0], [3007100, 128631.0, 129963.0], [3007500, 128923.0, 130264.0], [3007700, 129265.0, 130614.0], [3008500, 129311.0, 130664.0], [3011700, 129394.0, 130761.0], [3011900, 129719.0, 131116.0], [3012100, 129799.0, 131191.0], [3012700, 129862.0, 131254.0], [3012901, 130131.0, 131568.0], [3012902, 130209.0, 131657.0], [3013100, 130351.0, 131808.0], [3013300, 130540.0, 132023.0], [3013500, 130681.0, 132164.0], [3013700, 130775.0, 132256.0], [3013900, 130873.0, 132361.0], [3014100, 130946.0, 132435.0], [3014900, 131038.0, 132520.0], [3015100, 131133.0, 132617.0], [3015300, 131326.0, 132799.0], [3015500, 131431.0, 132916.0], [3015700, 131668.0, 133145.0], [3015900, 132188.0, 133625.0], [3016100, 132447.0, 133880.0], [3016300, 132567.0, 133979.0], [3017700, 133106.0, 134480.0], [3017900, 133169.0, 134528.0], [3018100, 133295.0, 134639.0], [3018300, 133453.0, 134789.0], [3018501, 133527.0, 134871.0], [3018700, 133810.0, 135137.0], [3019300, 134296.0, 135570.0], [3019700, 134978.0, 136134.0], [3019900, 135175.0, 136329.0], [3020100, 135228.0, 136378.0], [3020300, 135387.0, 136549.0], [3020500, 135622.0, 136739.0], [3020700, 135951.0, 137013.0], [3021100, 136048.0, 137124.0], [3021300, 136077.0, 137153.0], [3021700, 136119.0, 137190.0], [3021900, 136345.0, 137363.0], [3022100, 136486.0, 137509.0], [3022700, 136677.0, 137681.0], [3022900, 136745.0, 137734.0], [3023300, 136883.0, 137875.0], [3024100, 136927.0, 137925.0], [3024300, 137027.0, 138022.0], [3024500, 137143.0, 138147.0], [3024900, 137222.0, 138225.0], [3025100, 137279.0, 138285.0], [3025300, 137325.0, 138320.0], [3025500, 137419.0, 138417.0], [3025700, 137455.0, 138453.0], [3025901, 137490.0, 138495.0], [3025902, 137515.0, 138518.0], [3026100, 137589.0, 138598.0], [3026300, 137614.0, 138618.0], [3026500, 137688.0, 138682.0], [3026900, 137730.0, 138730.0], [3027100, 137769.0, 138772.0], [3027300, 137814.0, 138822.0], [3027500, 137843.0, 138863.0], [3027700, 137949.0, 138964.0], [3027900, 138001.0, 139012.0], [3028100, 138078.0, 139072.0], [3028501, 138105.0, 139111.0], [3028700, 138209.0, 139204.0], [3029700, 138251.0, 139246.0], [3030500, 138528.0, 139510.0], [3032300, 138549.0, 139535.0], [3032500, 138600.0, 139589.0], [3032700, 138723.0, 139712.0], [3047700, 138850.0, 139841.0], [3048900, 138893.0, 139894.0], [3049300, 138997.0, 140001.0], [3049500, 139182.0, 140153.0], [3049700, 139446.0, 140398.0], [3049900, 139497.0, 140445.0], [3050100, 139658.0, 140600.0], [3050300, 139759.0, 140698.0], [3050500, 139937.0, 140843.0], [3050700, 140025.0, 140946.0], [3050900, 140065.0, 140995.0], [3051100, 140169.0, 141099.0], [3051300, 140271.0, 141206.0], [3051500, 140544.0, 141493.0], [3051700, 140836.0, 141799.0], [3051900, 141324.0, 142314.0], [3052300, 141587.0, 142593.0], [3052500, 141794.0, 142775.0], [3052700, 141987.0, 142972.0], [3052900, 142083.0, 143068.0], [3054300, 142950.0, 144125.0], [3054700, 143079.0, 144282.0], [3054900, 143514.0, 144733.0], [3055100, 143674.0, 144859.0], [3055300, 144526.0, 145720.0], [3055500, 144765.0, 145969.0], [3055700, 145086.0, 146324.0], [3056100, 145438.0, 146688.0], [3056300, 145708.0, 146963.0], [3056500, 145938.0, 147208.0], [3057100, 146179.0, 147448.0], [3057500, 146318.0, 147597.0], [3057900, 146435.0, 147732.0], [3059100, 146744.0, 148032.0], [3123700, 146788.0, 148076.0], [4000100, 146980.0, 148272.0], [4000700, 147357.0, 148650.0], [4001900, 147663.0, 148930.0], [4002500, 147717.0, 148989.0], [4003100, 147773.0, 149044.0], [4003300, 148052.0, 149302.0], [4003700, 148065.0, 149309.0], [4003900, 148105.0, 149352.0], [4004300, 148141.0, 149386.0], [4004500, 148198.0, 149452.0], [4004700, 148250.0, 149501.0], [4005300, 148305.0, 149556.0], [4005500, 148323.0, 149581.0], [4005700, 148398.0, 149648.0], [4005900, 148499.0, 149749.0], [4006300, 148584.0, 149831.0], [4006501, 148609.0, 149858.0], [4006900, 148642.0, 149891.0], [4007100, 148753.0, 150000.0], [4007300, 148772.0, 150020.0], [4007700, 148828.0, 150079.0], [4008100, 148890.0, 150149.0], [4008300, 148912.0, 150170.0], [4008500, 148942.0, 150202.0], [4008700, 148952.0, 150210.0], [4009100, 148971.0, 150227.0], [4009500, 148974.0, 150232.0], [4009700, 149052.0, 150309.0], [4009900, 149108.0, 150364.0], [4010100, 149143.0, 150407.0], [4011500, 149274.0, 150539.0], [4011700, 149289.0, 150557.0], [4011900, 149308.0, 150580.0], [4012500, 149341.0, 150611.0], [4014300, 149390.0, 150661.0], [4014900, 149436.0, 150707.0], [4015300, 149453.0, 150725.0], [4015700, 149515.0, 150788.0], [4015900, 149569.0, 150840.0], [4017900, 149603.0, 150873.0], [4019900, 149652.0, 150920.0]]

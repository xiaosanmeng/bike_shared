import pandas as pd
import numpy as np
from random import randint
from object_per_station import object
import time
import matplotlib.pyplot as plt


# 读取区域需求量
demand_i = pd.read_csv('F:/bikedata/bike_datas/test/zone_day.csv')
# 读取区域包含的站点信息
zone_i = pd.read_csv('F:/bikedata/bike_datas/station_datas.csv').rename(
    columns={'station_id': 'id', 'zone_id': 'zone'})[['id', 'zone']]
# 读取站点信息
stations_i = pd.read_csv('F:/bikedata/bike_datas/station_datas.csv')[['station_id', 'capacity']].\
    rename(columns={'station_id': 'id'})
# demand_i['start'] = round(demand_i['start'] * 0.5)
# demand_i['end'] = round(demand_i['end'] * 0.5)


def main(demand, zone, stations, day):
    # 构建新站点
    new_zone = pd.DataFrame()
    new_zone['zone'] = zone.drop(zone[zone[['zone']].duplicated()].index, axis=0)['zone']
    new_zone['id'] = new_zone['zone'].apply(lambda x: int(str(x)[::]))
    new_stations = new_zone[['id']]
    object_list, bikes_list, capacity_list, bikes_best_list, capacity_best_list = [], [], [], [], []
    new_stations['capacity_up'] = 80
    new_stations['capacity'] = 80
    best_gap, best_start_demands, best_end_demands, best_bikes, best_capacity = 10000000, 0, 0, 10000000, 10000000
    best_object = ()
    new_stations_best = new_stations.copy()
    for time_i in range(10):
        # 加入新站点
        stations_i = pd.concat([stations, new_stations])  # 加入新站点
        zone_i = pd.concat([new_zone, zone], sort=True)  # 加入新站点
        zone_count_stations = zone_i.groupby(['zone'])['id'].count().reset_index()  # 统计每个区域的站点数量
        demand_i = pd.merge(demand, zone_count_stations, how='left', on='zone').rename(columns={'id': 'count_stations'})
        stations_i['bikes'] = round(stations_i['capacity'] * 0.5)  # 设置车子数量
        # stations['bikes'] = round(stations['capacity'] * 0.6)  # 设置车子数量
        # stations['bikes'] = stations['capacity'].apply(lambda x: x * randint(4, 7)/10)  # 设置车子数量
        # stations['bikes'] = stations['capacity'].apply(lambda x: round(x * randint(2, 9)/10))  # 设置车子数量
        stations_i = stations_i.set_index('id')
        gap, start_demands, end_demands, bikes = object(time_i, demand_i, zone_i, stations_i, day)
        capacity = stations_i['capacity'].sum()
        object_i = (gap, start_demands, end_demands, bikes, capacity)
        object_list.append(object_i)

        random_num = randint(0, 100)
        t = False
        # if best_gap > gap and best_start_demands < start_demands and best_end_demands < end_demands:
        #     best_gap, best_start_demands, best_end_demands = gap, start_demands, end_demands
        #     best_object = object_i
        #     new_stations_best = new_stations.copy()

        if best_bikes > bikes and best_capacity > capacity:
            best_bikes, best_capacity = bikes, capacity
            best_object = object_i
            new_stations_best = new_stations.copy()
            t = True
        if t is False and random_num < 10:
            new_stations['capacity'] = new_stations_best['capacity_up'].apply(lambda x: round(x * randint(70, 100) / 100))
        else:
            new_stations['capacity'] = new_stations_best['capacity'].apply(lambda x: round(x * randint(80, 100) / 100))

        bikes_list.append(bikes)
        capacity_list.append(capacity)
        bikes_best_list.append(best_bikes)
        capacity_best_list.append(best_capacity)
    print(best_object)
    return object_list, bikes_list, capacity_list, bikes_best_list, capacity_best_list


start_time = time.time()
object_list, bikes_list, capacity_list, bikes_best_list, capacity_best_list = main(demand_i, zone_i, stations_i, 5)
end_time = time.time()
print(object_list)
print('用时：%s s' % round(end_time - start_time))


def DrawLinechart(y1, y2, title):
    x = range(len(y1))  # 生成0-10
    plt.plot(x, y1, c="R", label='common')
    plt.plot(x, y2, c='B', label='best')
    plt.legend(loc = 'upper left')#图例的位置是左上
    plt.xlabel('round')#X轴标签
    plt.ylabel('value')#Y轴标签
    plt.title(title)#折线图标题

    plt.show()
# DrawLinechart(bikes_list, bikes_best_list, 'bikes')
DrawLinechart(capacity_list, capacity_best_list, 'capacity')

# 容量0.4-1[(12780.0, 136985.0, 136983.0), (12548.0, 136457.0, 136403.0), (12526.0, 136457.0, 136403.0), (12631.0, 136723.0, 136588.0), (12568.0, 136457.0, 136403.0), (12536.0, 136457.0, 136403.0), (12659.0, 136719.0, 136798.0), (12556.0, 136457.0, 136403.0), (12554.0, 136457.0, 136403.0), (12637.0, 136723.0, 136588.0), (12649.0, 136723.0, 136588.0), (12635.0, 136723.0, 136588.0), (12615.0, 136723.0, 136588.0), (12544.0, 136457.0, 136403.0), (12536.0, 136457.0, 136403.0), (12635.0, 136723.0, 136588.0), (12532.0, 136457.0, 136403.0), (12568.0, 136457.0, 136403.0), (12552.0, 136457.0, 136403.0), (12544.0, 136457.0, 136403.0)]


# 寻找最优解容量0.8-1 [(12748.0, 136985.0, 136983.0, 19288.0, 55578), (12744.0, 136985.0, 136983.0, 19386.0, 52485), (12764.0, 136985.0, 136983.0, 19221.0, 52624), (12760.0, 136985.0, 136983.0, 19262.0, 49950), (12778.0, 136985.0, 136983.0, 19199.0, 50018), (12631.0, 136723.0, 136588.0, 19200.0, 47405), (12639.0, 136723.0, 136588.0, 19103.0, 47584), (12766.0, 136985.0, 136983.0, 18978.0, 45257), (12556.0, 136457.0, 136403.0, 18964.0, 43245), (12528.0, 136457.0, 136403.0, 18897.0, 41500), (12536.0, 136457.0, 136403.0, 18786.0, 39890), (12528.0, 136457.0, 136403.0, 18566.0, 38456), (12562.0, 136457.0, 136403.0, 18543.0, 37150), (12548.0, 136457.0, 136403.0, 18176.0, 35944), (12578.0, 136457.0, 136403.0, 18267.0, 34896), (12586.0, 136457.0, 136403.0, 18204.0, 34807), (12560.0, 136457.0, 136403.0, 18236.0, 34896), (12546.0, 136457.0, 136403.0, 18092.0, 34888), (12568.0, 136457.0, 136403.0, 17890.0, 33903), (12552.0, 136457.0, 136403.0, 17424.0, 32982), (12431.0, 135745.0, 135598.0, 17484.0, 32244), (12782.0, 136985.0, 136983.0, 19182.0, 51072), (12445.0, 135745.0, 135598.0, 17301.0, 32215), (12391.0, 135272.0, 135221.0, 16642.0, 31551), (12396.0, 135507.0, 135561.0, 16043.0, 30938), (12349.0, 135004.0, 135009.0, 15457.0, 30398), (12019.0, 132645.0, 132546.0, 15210.0, 29897), (12154.0, 133260.0, 133270.0, 14813.0, 29458), (12131.0, 133677.0, 133480.0, 15001.0, 29054), (12139.0, 133677.0, 133480.0, 14726.0, 29048), (12041.0, 132645.0, 132546.0, 14545.0, 28700), (12118.0, 133357.0, 133351.0, 14381.0, 28367), (11977.0, 132485.0, 132420.0, 14140.0, 28066), (11997.0, 132485.0, 132420.0, 14329.0, 27815), (11977.0, 132485.0, 132420.0, 14025.0, 27810), (12009.0, 132485.0, 132420.0, 14629.0, 27569), (11965.0, 132485.0, 132420.0, 14046.0, 27569), (12770.0, 136985.0, 136983.0, 19349.0, 50901), (11977.0, 132485.0, 132420.0, 13473.0, 27557), (11979.0, 132485.0, 132420.0, 13768.0, 27334), (12021.0, 132485.0, 132420.0, 13825.0, 27348), (11995.0, 132485.0, 132420.0, 13547.0, 27350), (11995.0, 132485.0, 132420.0, 13876.0, 27349), (11830.0, 130455.0, 130525.0, 13519.0, 27339), (11991.0, 132485.0, 132420.0, 13561.0, 27338), (11983.0, 132485.0, 132420.0, 13078.0, 27341), (11975.0, 132485.0, 132420.0, 13057.0, 27157), (11987.0, 132485.0, 132420.0, 13436.0, 26985), (11969.0, 132485.0, 132420.0, 13354.0, 26970), (11973.0, 132485.0, 132420.0, 12659.0, 26971), (11936.0, 132302.0, 132272.0, 12948.0, 26797), (11991.0, 132485.0, 132420.0, 13065.0, 26811), (11924.0, 132302.0, 132272.0, 13039.0, 26825), (11983.0, 132485.0, 132420.0, 13440.0, 26817), (11948.0, 132302.0, 132272.0, 13069.0, 26826), (11967.0, 132485.0, 132420.0, 13479.0, 26827), (11963.0, 132485.0, 132420.0, 13122.0, 26820), (11977.0, 132485.0, 132420.0, 12898.0, 26820), (11983.0, 132485.0, 132420.0, 13272.0, 26829), (11930.0, 132302.0, 132272.0, 13011.0, 26822), (12770.0, 136985.0, 136983.0, 19368.0, 50982), (11975.0, 132485.0, 132420.0, 13139.0, 26809), (11977.0, 132485.0, 132420.0, 13176.0, 26816), (11959.0, 132485.0, 132420.0, 13732.0, 26828), (12784.0, 136985.0, 136983.0, 19254.0, 50896), (12776.0, 136985.0, 136983.0, 19244.0, 50973), (11932.0, 132302.0, 132272.0, 12887.0, 26810), (11969.0, 132485.0, 132420.0, 13119.0, 26825), (11973.0, 132485.0, 132420.0, 13495.0, 26813), (11955.0, 132485.0, 132420.0, 13234.0, 26825), (11987.0, 132485.0, 132420.0, 12801.0, 26803), (12005.0, 132485.0, 132420.0, 12998.0, 26806), (11979.0, 132485.0, 132420.0, 13560.0, 26817), (11983.0, 132485.0, 132420.0, 13247.0, 26831), (12758.0, 136985.0, 136983.0, 19322.0, 50989), (11955.0, 132485.0, 132420.0, 13065.0, 26847), (11965.0, 132485.0, 132420.0, 14010.0, 26828), (11973.0, 132485.0, 132420.0, 13442.0, 26835), (12760.0, 136985.0, 136983.0, 19247.0, 50993), (11985.0, 132485.0, 132420.0, 13211.0, 26835), (11997.0, 132485.0, 132420.0, 13204.0, 26829), (11971.0, 132485.0, 132420.0, 13768.0, 26822), (12768.0, 136985.0, 136983.0, 19256.0, 51018), (11981.0, 132485.0, 132420.0, 13742.0, 26815), (11979.0, 132485.0, 132420.0, 13471.0, 26818), (11969.0, 132485.0, 132420.0, 13324.0, 26831), (11934.0, 132302.0, 132272.0, 12693.0, 26831), (11977.0, 132485.0, 132420.0, 12878.0, 26823), (11989.0, 132485.0, 132420.0, 13280.0, 26826), (11991.0, 132485.0, 132420.0, 13289.0, 26828), (11959.0, 132485.0, 132420.0, 13037.0, 26817), (11955.0, 132485.0, 132420.0, 13152.0, 26826), (11985.0, 132485.0, 132420.0, 13854.0, 26820), (11955.0, 132485.0, 132420.0, 13630.0, 26805), (11969.0, 132485.0, 132420.0, 13287.0, 26815), (11995.0, 132485.0, 132420.0, 13308.0, 26831), (11977.0, 132485.0, 132420.0, 13367.0, 26817), (11967.0, 132485.0, 132420.0, 14125.0, 26816), (11926.0, 132302.0, 132272.0, 13223.0, 26823), (11987.0, 132485.0, 132420.0, 12974.0, 26815)]

# 增加站点容量和车子数量的目标函数

# 开始结束需求量分配比例一致
# 所有站点初始比例 0.5 / day5  12754.0 136985.0 136983.0/12776.0 136985.0 136983.0/12756.0 136985.0 136983.0/12746.0 136985.0 136983.0/12766.0 136985.0 136983.0
# 所有站点初始比例 0.6 / day5  12770.0 136985.0 136983.0/12764.0 136985.0 136983.0/12780.0 136985.0 136983.0/12764.0 136985.0 136983.0
# 所有站点初始比例 0.4-0.6 / day5  12750.0 136985.0 136983.0/12756.0 136985.0 136983.0/12760.0 136985.0 136983.0/12764.0 136985.0 136983.0
# 所有站点初始比例 0.2-0.8 / day5  12770.0 136985.0 136983.0/12770.0 136985.0 136983.0/12633.0 136723.0 136588.0/12762.0 136985.0 136983.0

# 原站点 初始比例 0.5 / day5  11820.0 130692.0 130586.0/11806.0 130692.0 130586.0/11808.0 130692.0 130586.0/11816.0 130692.0 130586.0/11788.0 130692.0 130586.0/11810.0 130692.0 130586.0
# 原站点 初始比例 0.6 / day5  11822.0 130692.0 130586.0/11806.0 130692.0 130586.0/11808.0 130692.0 130586.0/11804.0 130692.0 130586.0
# 所有站点初始比例 0.4-0.6 / day5  11808.0 130692.0 130586.0/11812.0 130692.0 130586.0/11814.0 130692.0 130586.0






#  开始结束需求量分配比例不同
# 所有站点初始比例 0.5 / day5  40670.0 114765.0 114851.0/42953.0 113712.0 113813.0/41784.0 115108.0 115020.0/40687.0 111665.0 111634.0/39514.0 110371.0 110331.0


# 原站点/初始车子比例 0.5/不断改变需求量无法分配的站点初始比例/day1  2554.0 30228.0 30228.0 / 2564.0 30228.0 30228.0 / 2556.0 30228.0 30228.0
# 原站点/初始车子比例 0.5/不断改变需求量无法分配的站点初始比例/day1-2  4569.0 48228.0 48227.0 / 4577.0 48228.0 48227.0/4575.0 48228.0 48227.0
